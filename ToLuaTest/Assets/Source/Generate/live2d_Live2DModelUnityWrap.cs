//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class live2d_Live2DModelUnityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(live2d.Live2DModelUnity), typeof(live2d.ALive2DModel));
		L.RegFunction("releaseModel", releaseModel);
		L.RegFunction("setMatrix", setMatrix);
		L.RegFunction("update", update);
		L.RegFunction("draw", draw);
		L.RegFunction("setTexture", setTexture);
		L.RegFunction("loadModel", loadModel);
		L.RegFunction("getDrawParam", getDrawParam);
		L.RegFunction("enableCullingSetting", enableCullingSetting);
		L.RegFunction("setLayer", setLayer);
		L.RegFunction("getLayer", getLayer);
		L.RegFunction("setRenderMode", setRenderMode);
		L.RegFunction("getRenderMode", getRenderMode);
		L.RegFunction("setTextureColor", setTextureColor);
		L.RegFunction("setConvertTexture", setConvertTexture);
		L.RegFunction("toStringDrawCommand", toStringDrawCommand);
		L.RegFunction("New", _Createlive2d_Live2DModelUnity);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Createlive2d_Live2DModelUnity(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				live2d.Live2DModelUnity obj = new live2d.Live2DModelUnity();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: live2d.Live2DModelUnity.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int releaseModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			obj.releaseModel();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setMatrix(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<float[]>(L, 2))
			{
				live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
				float[] arg0 = ToLua.ToNumberArray<float>(L, 2);
				obj.setMatrix(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Matrix4x4>(L, 2))
			{
				live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
				UnityEngine.Matrix4x4 arg0 = StackTraits<UnityEngine.Matrix4x4>.To(L, 2);
				obj.setMatrix(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: live2d.Live2DModelUnity.setMatrix");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			obj.update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int draw(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			obj.draw();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Texture2D arg1 = (UnityEngine.Texture2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.Texture2D));
			obj.setTexture(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int loadModel(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<byte[]>(L, 1))
			{
				byte[] arg0 = ToLua.CheckByteBuffer(L, 1);
				live2d.Live2DModelUnity o = live2d.Live2DModelUnity.loadModel(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.IO.Stream>(L, 1))
			{
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 1);
				live2d.Live2DModelUnity o = live2d.Live2DModelUnity.loadModel(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				live2d.Live2DModelUnity o = live2d.Live2DModelUnity.loadModel(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: live2d.Live2DModelUnity.loadModel");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getDrawParam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			live2d.DrawParam o = obj.getDrawParam();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int enableCullingSetting(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableCullingSetting(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setLayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.setLayer(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getLayer(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			int o = obj.getLayer();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setRenderMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.setRenderMode(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getRenderMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			int o = obj.getRenderMode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTextureColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.setTextureColor(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setConvertTexture(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Texture2D arg1 = (UnityEngine.Texture2D)ToLua.CheckObject(L, 3, typeof(UnityEngine.Texture2D));
			obj.setConvertTexture(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int toStringDrawCommand(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.Live2DModelUnity obj = (live2d.Live2DModelUnity)ToLua.CheckObject<live2d.Live2DModelUnity>(L, 1);
			string o = obj.toStringDrawCommand();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

