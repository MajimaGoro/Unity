//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class live2d_ALive2DModelWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(live2d.ALive2DModel), typeof(System.Object));
		L.RegFunction("setModelImpl", setModelImpl);
		L.RegFunction("getModelImpl", getModelImpl);
		L.RegFunction("getCanvasWidth", getCanvasWidth);
		L.RegFunction("getCanvasHeight", getCanvasHeight);
		L.RegFunction("getParamFloat", getParamFloat);
		L.RegFunction("setParamFloat", setParamFloat);
		L.RegFunction("addToParamFloat", addToParamFloat);
		L.RegFunction("multParamFloat", multParamFloat);
		L.RegFunction("loadParam", loadParam);
		L.RegFunction("saveParam", saveParam);
		L.RegFunction("init", init);
		L.RegFunction("update", update);
		L.RegFunction("generateModelTextureNo", generateModelTextureNo);
		L.RegFunction("releaseModelTextureNo", releaseModelTextureNo);
		L.RegFunction("deleteTextures", deleteTextures);
		L.RegFunction("draw", draw);
		L.RegFunction("loadModel_exe", loadModel_exe);
		L.RegFunction("getParamIndex", getParamIndex);
		L.RegFunction("getModelContext", getModelContext);
		L.RegFunction("getErrorFlags", getErrorFlags);
		L.RegFunction("setPartsOpacity", setPartsOpacity);
		L.RegFunction("getPartsOpacity", getPartsOpacity);
		L.RegFunction("getPartsDataIndex", getPartsDataIndex);
		L.RegFunction("getDrawParam", getDrawParam);
		L.RegFunction("getDrawDataIndex", getDrawDataIndex);
		L.RegFunction("getDrawData", getDrawData);
		L.RegFunction("getTransformedPoints", getTransformedPoints);
		L.RegFunction("getIndexArray", getIndexArray);
		L.RegFunction("setAvatarParts", setAvatarParts);
		L.RegFunction("releaseAvatarParts", releaseAvatarParts);
		L.RegFunction("setAnisotropy", setAnisotropy);
		L.RegFunction("getAnisotropy", getAnisotropy);
		L.RegFunction("toStringAllDrawable", toStringAllDrawable);
		L.RegFunction("setTextureMap", setTextureMap);
		L.RegFunction("resetTextureMap", resetTextureMap);
		L.RegFunction("setPremultipliedAlpha", setPremultipliedAlpha);
		L.RegFunction("isPremultipliedAlpha", isPremultipliedAlpha);
		L.RegFunction("setModelDrawMethodVersion", setModelDrawMethodVersion);
		L.RegFunction("getModelDrawMethodVersion", getModelDrawMethodVersion);
		L.RegFunction("setColorConvertHSL", setColorConvertHSL);
		L.RegFunction("setColorConvertMainLine", setColorConvertMainLine);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegConstant("FILE_LOAD_EOF_ERROR", 1);
		L.RegConstant("FILE_LOAD_VERSION_ERROR", 2);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setModelImpl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			live2d.ModelImpl arg0 = (live2d.ModelImpl)ToLua.CheckObject<live2d.ModelImpl>(L, 2);
			obj.setModelImpl(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getModelImpl(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			live2d.ModelImpl o = obj.getModelImpl();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getCanvasWidth(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			float o = obj.getCanvasWidth();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getCanvasHeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			float o = obj.getCanvasHeight();
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getParamFloat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float o = obj.getParamFloat(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float o = obj.getParamFloat(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: live2d.ALive2DModel.getParamFloat");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setParamFloat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.setParamFloat(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.setParamFloat(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, float, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.setParamFloat(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, float, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.setParamFloat(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: live2d.ALive2DModel.setParamFloat");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int addToParamFloat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.addToParamFloat(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.addToParamFloat(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, float, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.addToParamFloat(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, float, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.addToParamFloat(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: live2d.ALive2DModel.addToParamFloat");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int multParamFloat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.multParamFloat(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.multParamFloat(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, float, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.multParamFloat(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, float, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
				obj.multParamFloat(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: live2d.ALive2DModel.multParamFloat");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int loadParam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			obj.loadParam();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int saveParam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			obj.saveParam();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			obj.init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			obj.update();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int generateModelTextureNo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			int o = obj.generateModelTextureNo();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int releaseModelTextureNo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.releaseModelTextureNo(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int deleteTextures(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			obj.deleteTextures();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int draw(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			obj.draw();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int loadModel_exe(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.IO.Stream>(L, 2))
			{
				live2d.ALive2DModel arg0 = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				System.IO.Stream arg1 = (System.IO.Stream)ToLua.ToObject(L, 2);
				live2d.ALive2DModel.loadModel_exe(arg0, arg1);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				live2d.ALive2DModel arg0 = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				live2d.ALive2DModel.loadModel_exe(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: live2d.ALive2DModel.loadModel_exe");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getParamIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int o = obj.getParamIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getModelContext(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			live2d.ModelContext o = obj.getModelContext();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getErrorFlags(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			int o = obj.getErrorFlags();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPartsOpacity(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.setPartsOpacity(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, float>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.setPartsOpacity(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: live2d.ALive2DModel.setPartsOpacity");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getPartsOpacity(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				float o = obj.getPartsOpacity(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float o = obj.getPartsOpacity(arg0);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: live2d.ALive2DModel.getPartsOpacity");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getPartsDataIndex(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<live2d.PartsDataID>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				live2d.PartsDataID arg0 = (live2d.PartsDataID)ToLua.ToObject(L, 2);
				int o = obj.getPartsDataIndex(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int o = obj.getPartsDataIndex(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: live2d.ALive2DModel.getPartsDataIndex");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getDrawParam(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			live2d.DrawParam o = obj.getDrawParam();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getDrawDataIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			int o = obj.getDrawDataIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getDrawData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			live2d.IDrawData o = obj.getDrawData(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getTransformedPoints(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float[] o = obj.getTransformedPoints(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getIndexArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			ushort[] o = obj.getIndexArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setAvatarParts(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			live2d.AvatarPartsItem arg1 = (live2d.AvatarPartsItem)ToLua.CheckObject<live2d.AvatarPartsItem>(L, 3);
			obj.setAvatarParts(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int releaseAvatarParts(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.releaseAvatarParts(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setAnisotropy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.setAnisotropy(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getAnisotropy(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			int o = obj.getAnisotropy();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int toStringAllDrawable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			string o = obj.toStringAllDrawable();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setTextureMap(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 7)
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 7);
				obj.setTextureMap(arg0, arg1, arg2, arg3, arg4, arg5);
				return 0;
			}
			else if (count == 8)
			{
				live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
				float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
				float arg4 = (float)LuaDLL.luaL_checknumber(L, 6);
				float arg5 = (float)LuaDLL.luaL_checknumber(L, 7);
				bool arg6 = LuaDLL.luaL_checkboolean(L, 8);
				obj.setTextureMap(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: live2d.ALive2DModel.setTextureMap");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int resetTextureMap(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			obj.resetTextureMap();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setPremultipliedAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.setPremultipliedAlpha(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int isPremultipliedAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			bool o = obj.isPremultipliedAlpha();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setModelDrawMethodVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			live2d.ALive2DModel.ModelDrawMethodVersion arg0 = (live2d.ALive2DModel.ModelDrawMethodVersion)ToLua.CheckObject(L, 2, typeof(live2d.ALive2DModel.ModelDrawMethodVersion));
			obj.setModelDrawMethodVersion(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getModelDrawMethodVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			live2d.ALive2DModel.ModelDrawMethodVersion o = obj.getModelDrawMethodVersion();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setColorConvertHSL(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float[] arg1 = ToLua.CheckNumberArray<float>(L, 3);
			obj.setColorConvertHSL(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setColorConvertMainLine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			live2d.ALive2DModel obj = (live2d.ALive2DModel)ToLua.CheckObject<live2d.ALive2DModel>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.setColorConvertMainLine(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

