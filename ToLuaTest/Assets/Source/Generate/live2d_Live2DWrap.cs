//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class live2d_Live2DWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(live2d.Live2D), typeof(System.Object));
		L.RegFunction("init", init);
		L.RegFunction("dispose", dispose);
		L.RegFunction("getVersionStr", getVersionStr);
		L.RegFunction("getVersionNo", getVersionNo);
		L.RegFunction("getError", getError);
		L.RegFunction("setDrawMethodVersion", setDrawMethodVersion);
		L.RegFunction("getDrawMethodVersion", getDrawMethodVersion);
		L.RegFunction("setClippingMaskBufferSize", setClippingMaskBufferSize);
		L.RegFunction("getClippingMaskBufferSize", getClippingMaskBufferSize);
		L.RegFunction("New", _Createlive2d_Live2D);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("__L2D_VERSION_STR__", get___L2D_VERSION_STR__, null);
		L.RegConstant("__L2D_VERSION_NO__", 201030000);
		L.RegVar("__L2D_PLATFORM_STR__", get___L2D_PLATFORM_STR__, null);
		L.RegConstant("L2D_RENDER_DRAW_MESH_NOW", 0);
		L.RegConstant("L2D_RENDER_DRAW_MESH", 1);
		L.RegConstant("L2D_NO_ERROR", 0);
		L.RegConstant("L2D_ERROR_LIVE2D_INIT_FAILED", 1000);
		L.RegConstant("L2D_ERROR_FILE_LOAD_FAILED", 1001);
		L.RegConstant("L2D_ERROR_MEMORY_ERROR", 1100);
		L.RegConstant("L2D_ERROR_MODEL_DATA_VERSION_MISMATCH", 2000);
		L.RegConstant("L2D_ERROR_MODEL_DATA_EOF_ERROR", 2001);
		L.RegConstant("L2D_ERROR_MODEL_DATA_UNKNOWN_FORMAT", 2002);
		L.RegConstant("L2D_ERROR_DDTEXTURE_SETUP_TRANSFORM_FAILED", 4000);
		L.RegVar("TEST_____ABC", get_TEST_____ABC, set_TEST_____ABC);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Createlive2d_Live2D(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				live2d.Live2D obj = new live2d.Live2D();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: live2d.Live2D.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			live2d.Live2D.init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			live2d.Live2D.dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getVersionStr(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string o = live2d.Live2D.getVersionStr();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getVersionNo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = live2d.Live2D.getVersionNo();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getError(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = live2d.Live2D.getError();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setDrawMethodVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			live2d.Live2D.DrawMethodVersion arg0 = (live2d.Live2D.DrawMethodVersion)ToLua.CheckObject(L, 1, typeof(live2d.Live2D.DrawMethodVersion));
			live2d.Live2D.setDrawMethodVersion(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getDrawMethodVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			live2d.Live2D.DrawMethodVersion o = live2d.Live2D.getDrawMethodVersion();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setClippingMaskBufferSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			live2d.Live2D.setClippingMaskBufferSize(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getClippingMaskBufferSize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = live2d.Live2D.getClippingMaskBufferSize();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get___L2D_VERSION_STR__(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, live2d.Live2D.__L2D_VERSION_STR__);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get___L2D_PLATFORM_STR__(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, live2d.Live2D.__L2D_PLATFORM_STR__);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TEST_____ABC(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, live2d.Live2D.TEST_____ABC);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_TEST_____ABC(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			live2d.Live2D.TEST_____ABC = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

